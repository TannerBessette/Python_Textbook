---
title: "Python Render Test"
author: "Tanner Bessette"
format: html
---

**OLYMPICS PROJECT IN PYTHON**

```{python}
import pandas as pd
import numpy as np
from palmerpenguins import load_penguins
from lets_plot import *
LetsPlot.setup_html()

# Read in data:
Athletes_df = pd.read_csv("/Users/tannerbessette/Desktop/SYE/athletes.csv")
Medals_df = pd.read_csv("/Users/tannerbessette/Desktop/SYE/medals.csv")


# Create Male and Female Datasets:
Male_Athletes_df = Athletes_df.query("gender == 'Male'")
Female_Athletes_df = Athletes_df.query("gender == 'Female'")


# Total Male and Female Medals for each sport:
# (learned reset_index from ChatGPT - helps to mimick summarise in R)
Male_Total_Medal_Counts = Medals_df.query("gender == 'M'").groupby("country_code").size().reset_index(name = "medal_totals")
Female_Total_Medal_Counts = Medals_df.query("gender == 'W'").groupby("country_code").size().reset_index(name = "medal_totals")


# MALE BAR PLOT:
# data manipulation (group_by, summarise):
Male_Athletes_Count = Male_Athletes_df.groupby("country_code").size().reset_index(name = "athlete_count")
# join data (looked ahead in textbook to ch. 22):
# (pd.merge is the join function, on is like by, how = join method(L/R))
Male_Athletes_Count_joined = pd.merge(Male_Athletes_Count, Male_Total_Medal_Counts, on="country_code", how="left")
# Only keep top 10 countries with most athletes:
Male_Athletes_Count_joined = Male_Athletes_Count_joined.query("athlete_count > 128")
# Create the Male bar plot with country's athletes and medals:
#Male_Athletes_Count.sort_values (essentially arrange -> do instead of reorder)
Male_Athletes_Count_joined = Male_Athletes_Count_joined.sort_values("athlete_count", ascending=False)
(
    ggplot() +
          geom_bar(aes(x = 'country_code', y = 'athlete_count'), fill = "lightblue", stat = "identity", data = Male_Athletes_Count_joined) +
          geom_bar(aes(x = 'country_code', y = 'medal_totals'), fill = "darkblue", stat = "identity", data = Male_Athletes_Count_joined) +
          labs(title = "Male Athletes and Medals by Country",
               x = "Country",
               y = "Male Athletes and Medal Counts") +
          theme_minimal()
)

```


```{python}
# FEMALE BAR PLOT:
# data manipulation (group_by, summarise):
Female_Athletes_Count = Female_Athletes_df.groupby("country_code").size().reset_index(name = "athlete_count")
# join data (looked ahead in textbook to ch. 22):
# (pd.merge is the join function, on is like by, how = join method(L/R))
Female_Athletes_Count_joined = pd.merge(Female_Athletes_Count, Female_Total_Medal_Counts, on="country_code", how="left")
# Only keep top 10 countries with most athletes:
Female_Athletes_Count_joined = Female_Athletes_Count_joined.query("athlete_count > 177")
# Create the Male bar plot with country's athletes and medals:
# (arrange first):
Female_Athletes_Count_joined = Female_Athletes_Count_joined.sort_values("athlete_count", ascending=False)
(
    ggplot() +
          geom_bar(aes(x = 'country_code', y = 'athlete_count'), fill = "lightblue", stat = "identity", data = Female_Athletes_Count_joined) +
          geom_bar(aes(x = 'country_code', y = 'medal_totals'), fill = "darkblue", stat = "identity", data = Female_Athletes_Count_joined) +
          labs(title = "Female Athletes and Medals by Country",
               x = "Country",
               y = "Female Athletes and Medal Counts") +
          theme_minimal()
)

```


Data manipulation before Heatmaps:
```{python}
# Used ChatGPT for this, first step is sorting which sport will be the levels
# for the factor variable, second is assigning names for each level
Medals_df['Sport_Category'] = np.select(
    [
        Medals_df['discipline'].isin(["3x3 Basketball", "Basketball"]),
        Medals_df['discipline'].isin(["Badminton", "Table Tennis", "Tennis"]),
        Medals_df['discipline'].isin(["Boxing", "Taekwondo", "Wrestling", "Judo"]),
        Medals_df['discipline'].isin(["Swimming", "Marathon Swimming", "Diving", "Artistic Swimming"]),
        Medals_df['discipline'].isin(["Volleyball", "Beach Volleyball"]),
        Medals_df['discipline'].isin(["Cycling BMX Freestyle", "Cycling BMX Racing", 
                                      "Cycling Mountain Bike", "Cycling Road", "Cycling Track"]),
        Medals_df['discipline'].isin(["Water Polo", "Surfing", "Sailing"]),
        Medals_df['discipline'].isin(["Artistic Gymnastics", "Rhythmic Gymnastics", "Trampoline Gymnastics"]),
        Medals_df['discipline'] == "Athletics",
        Medals_df['discipline'].isin(["Canoe Slalom", "Canoe Sprint", "Rowing"]),
        Medals_df['discipline'] == "Equestrian",
        Medals_df['discipline'].isin(["Football", "Handball", "Hockey", "Rugby Sevens"]),
        Medals_df['discipline'].isin(["Archery", "Shooting", "Fencing"]),
        Medals_df['discipline'].isin(["Triathlon", "Modern Pentathlon"]),
        Medals_df['discipline'] == "Weightlifting",
        Medals_df['discipline'] == "Skateboarding",
        Medals_df['discipline'] == "Breaking",
        Medals_df['discipline'] == "Sport Climbing",
        Medals_df['discipline'] == "Golf"
    ],
    [
        "Basketball",
        "Racket Sports",
        "Combat Sports",
        "Swimming",
        "Volleyball",
        "Cycling",
        "Water Sports",
        "Gymnastics",
        "Athletics",
        "Canoe/Rowing",
        "Equestrian",
        "Team Sports",
        "Precision Sports",
        "Athlons",
        "Weightlifting",
        "Skateboarding",
        "Breakdancing",
        "Climbing",
        "Golf"
    ],
    default="Other"  # default if any sport doesn't match
)

# Convert 'Sport_Category' to a categorical type
Medals_df['Sport_Category'] = Medals_df['Sport_Category'].astype('category')
```


Create a medal count variable that counts country's medals by sport:
```{python}
Medal_Counts = Medals_df.groupby(['country_code', 'Sport_Category']).size().reset_index(name='count').sort_values(by='count', ascending=False)
```

More manipulations for combined Heatmap:
```{python}
# Create a total medal count variable, and only keep countries 
# with medals in at least 1 sport
total_counts = Medal_Counts.groupby('country_code').size().reset_index(name='total_count')
Medal_Counts = pd.merge(Medal_Counts, total_counts, on = "country_code",
how = "left")
Medal_Counts = Medal_Counts.query("total_count > 1")
```

Create the Combined Heatmap:
```{python}
overall_countries_to_keep = ['AUS', 'BRA', 'CAN', 'CHN', 'ESP', 'FRA', 'GBR', 'GER', 'HUN', 'ITA', 'JPN', 'KOR', 'NED', 'NZL', 'USA']

Overall_Medal_Counts = Medal_Counts.query("country_code in @overall_countries_to_keep").query("count > 0")

(
    ggplot(Overall_Medal_Counts, aes(x='Sport_Category', 
                             y='country_code', 
                             fill='count')) +  
    geom_tile() +
    labs(title="Medal Count by Country and Sport",
         x="Sport",
         y="Country") +
    theme_minimal() +
    theme(axis_text_x=element_text(angle=90, vjust=0.5, hjust=1)) +
    coord_fixed() +
    scale_fill_gradient(low="lightblue", high="darkblue", name = "Medal Count")
)
# changing the geom_tile() width and height arguments did 
# nothing to improve visual appearance of the plot
```


Men's Overall Medal Heatmap:
```{python}
Male_Medal_Counts = Medals_df.query("gender == 'M'").groupby(['country_code', 'Sport_Category']).size().reset_index(name = 'count').sort_values(by = 'count', ascending = False)
```

More Male Data Manipulations:
```{python}
total_male_counts = Male_Medal_Counts.groupby('country_code').size().reset_index(name='total_count')
Male_Medal_Counts = pd.merge(Male_Medal_Counts, total_male_counts, on = "country_code", how = "left")
Male_Medal_Counts = Male_Medal_Counts.query("total_count > 1")
```

Male Heatmap Plot:
```{python}
male_countries_to_keep = ['AUS', 'CHN', 'ESP', 'FRA', 'GBR', 'GER', 'HUN', 'IRI', 'ITA', 'JPN', 'KOR', 'NED', 'USA', 'UZB']

Updated_Medal_Counts = Male_Medal_Counts.query("country_code in @male_countries_to_keep").query("count > 0")

(
    ggplot(Updated_Medal_Counts, aes(x='Sport_Category', 
                             y='country_code', 
                             fill='count')) +  
    geom_tile() +
    labs(title="Medal Count by Country and Sport (Male)",
         x="Sport",
         y="Country") +
    theme_minimal() +
    theme(axis_text_x=element_text(angle=90, vjust=0.5, hjust=1)) +
    coord_fixed() +
    scale_fill_gradient(low="lightblue", high="darkblue", name = "Medal Count")
)
```

Women's Overall Medal Heatmap:
```{python}
Female_Medal_Counts = Medals_df.query("gender == 'W'").groupby(['country_code', 'Sport_Category']).size().reset_index(name = 'count').sort_values(by = 'count', ascending = False)
```

More Female Data Manipulations:
```{python}
total_female_counts = Female_Medal_Counts.groupby('country_code').size().reset_index(name='total_count')
Female_Medal_Counts = pd.merge(Female_Medal_Counts, total_female_counts, on = "country_code", how = "left")
Female_Medal_Counts = Female_Medal_Counts.query("total_count > 1")
```

Female Heatmap Plot:
```{python}
female_countries_to_keep = ['AUS', 'BRA', 'CAN', 'CHN', 'FRA', 'GBR', 'GER',  'ITA', 'JPN', 'KOR', 'NED', 'NZL', 'USA']

Updated_Female_Medal_Counts = Female_Medal_Counts.query("country_code in @female_countries_to_keep").query("count > 0")

(
    ggplot(Updated_Female_Medal_Counts, aes(x='Sport_Category', 
                             y='country_code', 
                             fill='count')) +  
    geom_tile() +
    labs(title="Medal Count by Country and Sport (Female)",
         x="Sport",
         y="Country") +
    theme_minimal() +
    theme(axis_text_x=element_text(angle=90, vjust=0.5, hjust=1)) +
    coord_fixed() +
    scale_fill_gradient(low="lightblue", high="darkblue", name = "Medal Count")
)
```


Now create heatmaps based on proportion of sport's medals 
instead of totals:

Create Male Proportions Dataset:
```{python}
Male_prop = Male_Medal_Counts
Male_prop['total_sport_medals'] = Male_prop.groupby('Sport_Category')['count'].transform('sum')
Male_prop['prop_sport_medals'] = Male_prop['count'] / Male_prop['total_sport_medals']
```

Create Female Proportions Dataset:
```{python}
Female_prop = Female_Medal_Counts
Female_prop['total_sport_medals'] = Female_prop.groupby('Sport_Category')['count'].transform('sum')
Female_prop['prop_sport_medals'] = Female_prop['count'] / Female_prop['total_sport_medals']
```

Now create the proportions heatmap plots:
Male Proportions Heatmap:
```{python}
Updated_Male_Prop = Male_prop.query("country_code in @male_countries_to_keep").query("count > 0")

(
    ggplot(Updated_Male_Prop, aes(x='Sport_Category', 
                                  y='country_code', 
                                  fill='prop_sport_medals')) +  
    geom_tile() +
    labs(title="Proportion of Medals Won for Each Sport (Male)",
         x="Sport",
         y="Country") +
    theme_minimal() +
    theme(axis_text_x=element_text(angle=90, vjust=0.5, hjust=1)) +
    scale_fill_gradient(low="lightblue", high="darkblue", name="Medal Proportion") +
    coord_fixed()
)
```


Female Proportions Heatmap:
```{python}
Updated_Female_Prop = Female_prop.query("country_code in @female_countries_to_keep").query("count > 0")

(
    ggplot(Updated_Female_Prop, aes(x='Sport_Category', 
                                  y='country_code', 
                                  fill='prop_sport_medals')) +  
    geom_tile() +
    ggsize(1600, 800) +
    labs(title="Proportion of Medals Won for Each Sport (Female)",
         x="Sport",
         y="Country") +
    theme_minimal() +
    scale_fill_gradient(low="lightblue", high="darkblue", name="Medal Proportion") +
    theme(axis_text_x=element_text(angle=90, vjust=1, hjust=1)) +
    coord_fixed()
)
```

**Specific Code Comparisons:**

I thought it may be interesting to compare some of the specific data manipulations side by side now that we have seen the project in full in both R and Python.

Before making the male athletes and medals bar plot, I had to group by the country and add up all the athletes for each country.

Here is how I did it in R:
```{r}
Male_Athletes_Count <- Male_Athletes_df %>%
  group_by(country_code) %>%
  summarise(athlete_count = n())
```

And here is how I did it in Python:
```{python}
# data manipulation (group_by, summarise):
Male_Athletes_Count = Male_Athletes_df.groupby("country_code").size().reset_index(name="athlete_count")

Male_Athletes_Count.head()
```

Obviously the group_by() and groupby() functions are extremely similar, as I highlighted in the function comparison. The .size() function in Python essentially does the same thing as the combination of a summarise and n() in R. In Python, to keep country_code and athlete_count as two different columns and keep the Male_Athletes_Counts as a dataframe, we need to use the reset_index() function.

Another example of side by side code comparisons of R and Python that I want to show is with joining datasets.

Here is how I performed the joining of the male athletes and male medals datasets before creating the bar plot using R:

```{r}
Male_Athletes_Count <- left_join(Male_Athletes_Count, Male_Total_Medal_Counts, 
                                 by = "country_code")
```

And here is how I did that in Python:

```{python}
Male_Athletes_Count_joined = pd.merge(Male_Athletes_Count, Male_Total_Medal_Counts, on="country_code", how="left")
```

Both languages are using a left join, and joining by matching the country_code in the two datasets they are joining. R has a built-in left_join() function to specify that the join type is left, while Python's pd.merge() function can be used for all types of joins, and you use the how = "left" argument to specify that you want the join to be a left join. The on argument in this R example and the by argument in the Python example are used in the same exact way, to specify the variable to join on.

